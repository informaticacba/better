// Generated by CoffeeScript 1.3.3
(function() {
  var $, _form;

  $ = jQuery;

  _form = function(_self, option) {
    $.extend(this, option);
    this.self = $(_self);
    return this;
  };

  _form.prototype = {
    go: function() {
      var data, k, url, v,
        _this = this;
      this.form_tag = this.self.closest('form');
      if (this.self.is(this.except)) {
        return;
      }
      this.before.call(this.self);
      this.loading = new util.loading(this.self);
      url = this.url();
      data = this.fields();
      for (k in data) {
        v = data[k];
        console.log(k, '=>', v);
      }
      $.ajaxSetup({
        beforeSend: function(xhr) {
          var token;
          token = $('meta[name=csrf-token]').attr('content');
          if (token != null) {
            return xhr.setRequestHeader('X-CSRF-Token', token);
          }
        }
      });
      $.post(url, data, function(msg) {
        return _this.post_after(msg);
      }).error(function(msg) {
        return _this.post_after(msg);
      });
      return false;
    },
    post_after: function(msg) {
      this.loading.recover();
      return this.after.call(this.self, msg);
    },
    fields: function() {
      var data;
      data = {};
      this.field(data, 'input:hidden');
      this.field(data, 'input:text');
      this.field(data, 'input[type=email]');
      this.field(data, 'input[type=password]');
      this.field(data, 'select');
      this.field(data, 'input:radio:checked');
      this.field(data, 'textarea');
      this.field(data, 'input:checkbox:checked');
      return data;
    },
    field: function(data, selector) {
      $(selector, this.form_tag).each(function() {
        if (util.unempty(this.name)) {
          if (data[this.name] != null) {
            return data[this.name] += ',' + $(this).val();
          } else {
            return data[this.name] = $(this).val();
          }
        }
      });
      return data;
    },
    url: function() {
      return this.form_tag.attr('action') + this.url_suffix;
    }
  };

  $.fn.form = function(option) {
    var binder;
    option = $.extend({}, $.fn.form.defaults, option || {});
    binder = option.live ? "live" : "bind";
    this[binder](option.trigger_name(), function() {
      return $(this).wrapData(option.cache_key_suffix, function() {
        return new _form(this, option);
      }).go();
    });
    return this;
  };

  $.fn.form.defaults = {
    cache_key_suffix: "form",
    live: false,
    trigger: 'click',
    except: ".active,.disabled",
    url_suffix: ".json",
    trigger_name: function() {
      return this.trigger + "." + this.cache_key_suffix;
    },
    after: function() {},
    before: function() {}
  };

}).call(this);

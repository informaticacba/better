// Generated by CoffeeScript 1.3.3
(function() {
  var $, _form;

  $ = jQuery;

  _form = function(_self, option) {
    $.extend(this, option);
    this.self = $(_self);
    return this;
  };

  _form.prototype = {
    go: function() {
      var data, url,
        _this = this;
      this.form_tag = this.self.closest('form');
      if (this.self.is(this.except)) {
        return;
      }
      this.before.call(this.self);
      this.loading = new util.loading(this.self);
      url = this.url();
      data = this.form_tag.serialize();
      console.log("ajax.data=", data);
      $.ajaxSetup({
        beforeSend: function(xhr) {
          var token;
          token = $('meta[name=csrf-token]').attr('content');
          if (token != null) {
            return xhr.setRequestHeader('X-CSRF-Token', token);
          }
        }
      });
      $.post(url, data, function(msg) {
        return _this.post_after(msg);
      }).error(function(msg) {
        return _this.post_after(msg);
      });
      return false;
    },
    post_after: function(msg) {
      if (this.reset != null) {
        this.reset_after();
      }
      this.loading.recover();
      return this.after.call(this.self, msg);
    },
    reset_after: function() {
      return $(':input', this.form_tag).each(function() {
        var tag, type;
        type = this.type;
        tag = this.tagName.toLowerCase();
        if (tag === "textarea" || type === "text" || type === "email" || type === "password") {
          this.value = "";
        }
        return console.log('::::', type, ":::", tag);
      });
    },
    url: function() {
      return this.form_tag.attr('action') + this.url_suffix;
    }
  };

  $.fn.form = function(option) {
    var binder;
    option = $.extend({}, $.fn.form.defaults, option || {});
    binder = option.live ? "live" : "bind";
    this[binder](option.trigger_name(), function() {
      $(this).wrapData(option.cache_key_suffix, function() {
        return new _form(this, option);
      }).go();
      return false;
    });
    return this;
  };

  $.fn.form.defaults = {
    cache_key_suffix: "form",
    live: false,
    trigger: 'click',
    except: ".active,.disabled",
    url_suffix: ".json",
    reset: true,
    trigger_name: function() {
      return this.trigger + "." + this.cache_key_suffix;
    },
    after: function() {},
    before: function() {}
  };

}).call(this);
